[project]
name = "crawl4dev"
version = "0.1.0"
description = "Universal Documentation Crawler for LLM Training"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["documentation", "crawler", "llm", "web-scraping", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Software Development :: Documentation",
]
dependencies = [
    "crawl4ai>=0.6.3",
    "pyyaml>=6.0",
    "aiofiles>=23.0.0",
    "rich>=13.0.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "httpx>=0.24.0",  # For testing HTTP requests
    "respx>=0.20.0",  # For mocking HTTP requests
    "types-PyYAML>=6.0.0",  # Type stubs for PyYAML
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",
    "respx>=0.20.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
]

[project.scripts]
crawl4dev = "crawl4dev.crawler:cli_main"

[project.urls]
Homepage = "https://github.com/yourusername/crawl4dev"
Repository = "https://github.com/yourusername/crawl4dev"
Issues = "https://github.com/yourusername/crawl4dev/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/crawl4dev"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "B905", # `zip()` without an explicit `strict=` parameter
    "ARG002", # Unused method argument (often needed for interface compatibility)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101", "F401", "UP035"]

[tool.black]
target-version = ["py311"]
line-length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["crawl4ai.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_decorators = false
ignore_missing_imports = true

# Add overrides for common libraries without stubs
[[tool.mypy.overrides]]
module = [
    "respx.*",
    "pytest_mock.*", 
    "pytest_asyncio.*",
    "pytest_cov.*",
    "rich.*",
    "aiofiles.*",
    "httpx.*",
    "yaml.*",
    "pyyaml.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "network: marks tests that require network access",
]

[tool.coverage.run]

[dependency-groups]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
]

# Pylance/Pyright configuration for stub errors
[tool.pyright]
include = ["src", "tests"]
exclude = ["**/__pycache__"]
reportMissingImports = "none"
reportMissingTypeStubs = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownVariableType = "none"
typeCheckingMode = "basic"
pythonVersion = "3.11"
